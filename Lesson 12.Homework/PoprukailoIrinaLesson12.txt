Task 0.3.
1st query
SELECT *
FROM (SELECT [Name], [Color],[StandardCost], RANK() OVER (PARTITION BY [Color] ORDER BY [StandardCost] DESC) AS ProdRank
      FROM [Production].[Product]) AS MostExpens
WHERE MostExpens.ProdRank=1
      AND Color IS NOT NULL

2nd query
SELECT p.[Name], p.[StandardCost], p.[Color]
FROM [Production].[Product] p
JOIN (
    SELECT Color, MAX(StandardCost) AS MaxPrice
    FROM [Production].[Product]
    GROUP BY Color) 
	AS color_max_prices 
ON p.Color = color_max_prices.Color AND p.StandardCost = color_max_prices.MaxPrice 

3rd query
SELECT p.[Name], p.[StandardCost], p.[Color]
FROM [Production].[Product] p
WHERE p.StandardCost = (
    SELECT MAX(StandardCost)
    FROM [Production].[Product]
    WHERE Color = p.Color
)

Task 0.4
1) Exhibits (ExhibitID, Name, Artist, CreationYear)
2) Events (EventID, Name, StartDate, EndDate, Price, Location)
3) Employees (EmployeeID, FirstName, LastName, Gender, Department, Position, DateEmployment, Salary, Email)
4) Visitors (VisitorID, FirstName, LastName,Gender, DateOfBirth, Email)
5) Souvenirs (ProductID, ProductType, Name, Price)
6) Tickets (TicketID, Type, Price)
7) Trasactions (TrasactionID, ProductID, EventID, TicketID, VisitorID, Date)

1) Вывести сколько детей  за текущий год посетило музей выставки, которые проводились в весенний и летние периоды.
2) Указать, какая аудитория (взрослые, подростки, дети) занимала первое место по количеству проданных билетов на 
каждой выставке, проводившейся за последние 3 года.

Task 3.
SELECT Year, 
       ISNULL([1], 0) AS January,
       ISNULL([2], 0) AS February, 
	   ISNULL([12], 0) AS December
FROM 
 (SELECT [OrderQty], 
         DATEPART(YEAR, [EndDate]) AS Year,
	     DATEPART(MONTH, [EndDate]) AS Month
  FROM [Production].[WorkOrder]
      WHERE DATEPART(MONTH,[EndDate]) IN (1,2,12))AS SourceTable
PIVOT 
      (SUM (OrderQty) FOR Month IN ([1], [2], [12])
) AS PivotTable
ORDER BY Year

Task 4. 
CREATE TABLE FunctionUsage (
    Function_name NVARCHAR(100) PRIMARY KEY,
    Function_count INT
)

MERGE FunctionUsage AS target
USING (
    SELECT Functions, COUNT(*) AS FunctionCount
    FROM (
        SELECT Alex AS Functions FROM [dbo].[Lesson12]
        UNION ALL
        SELECT Carlos FROM [dbo].[Lesson12]
        UNION ALL
        SELECT Charles FROM [dbo].[Lesson12]
		UNION ALL
        SELECT Daniel FROM [dbo].[Lesson12]
		UNION ALL
        SELECT Esteban FROM [dbo].[Lesson12]
		UNION ALL
        SELECT Fred FROM [dbo].[Lesson12]
		UNION ALL
        SELECT George FROM [dbo].[Lesson12]
		UNION ALL
        SELECT Lando FROM [dbo].[Lesson12]
		UNION ALL
        SELECT Lewis FROM [dbo].[Lesson12]
    ) AS AllFunctions
	WHERE Functions IS NOT NULL
    GROUP BY Functions
) AS source
ON target.Function_name = source.Functions
WHEN MATCHED THEN
    UPDATE SET target.Function_count = source.FunctionCount
WHEN NOT MATCHED THEN
    INSERT (Function_name, Function_count) VALUES (source.Functions, source.FunctionCount);

SELECT *
FROM [dbo].[FunctionUsage]
ORDER BY [Function_count] DESC

CREATE TABLE FunctionUsage (
    Function_name NVARCHAR(100),
    Function_count INT
	)

SELECT * FROM [dbo].[Lesson12]

MERGE INTO FunctionUsage AS target
USING (SELECT Alex FROM [dbo].[Lesson12]
WHERE Alex IS NOT NULL) AS source ON target.Function_name = source.Alex
WHEN MATCHED THEN
    UPDATE SET Function_count = target.Function_count + 1
WHEN NOT MATCHED THEN
    INSERT (Function_name, Function_count)
    VALUES (source.Alex, 1);

MERGE INTO FunctionUsage AS target
USING (SELECT Carlos FROM [dbo].[Lesson12]
WHERE Carlos IS NOT NULL) AS source ON target.Function_name = source.Carlos
WHEN MATCHED THEN
    UPDATE SET Function_count = target.Function_count + 1
WHEN NOT MATCHED THEN
    INSERT (Function_name, Function_count)
    VALUES (source.Carlos, 1);

MERGE INTO FunctionUsage AS target
USING (SELECT Charles FROM [dbo].[Lesson12]
WHERE Charles IS NOT NULL) AS source ON target.Function_name = source.Charles
WHEN MATCHED THEN
    UPDATE SET Function_count = target.Function_count + 1
WHEN NOT MATCHED THEN
    INSERT (Function_name, Function_count)
    VALUES (source.Charles, 1);

MERGE INTO FunctionUsage AS target
USING (SELECT Daniel FROM [dbo].[Lesson12]
WHERE Daniel IS NOT NULL) AS source ON target.Function_name = source.Daniel
WHEN MATCHED THEN
    UPDATE SET Function_count = target.Function_count + 1
WHEN NOT MATCHED THEN
    INSERT (Function_name, Function_count)
    VALUES (source.Daniel, 1);

MERGE INTO FunctionUsage AS target
USING (SELECT Esteban FROM [dbo].[Lesson12]
WHERE Esteban IS NOT NULL) AS source ON target.Function_name = source.Esteban
WHEN MATCHED THEN
    UPDATE SET Function_count = target.Function_count + 1
WHEN NOT MATCHED THEN
    INSERT (Function_name, Function_count)
    VALUES (source.Esteban, 1);

MERGE INTO FunctionUsage AS target
USING (SELECT Fred FROM [dbo].[Lesson12]
WHERE Fred IS NOT NULL) AS source ON target.Function_name = source.Fred
WHEN MATCHED THEN
    UPDATE SET Function_count = target.Function_count + 1
WHEN NOT MATCHED THEN
    INSERT (Function_name, Function_count)
    VALUES (source.Fred, 1);

MERGE INTO FunctionUsage AS target
USING (SELECT George FROM [dbo].[Lesson12]
WHERE George IS NOT NULL) AS source ON target.Function_name = source.George
WHEN MATCHED THEN
    UPDATE SET Function_count = target.Function_count + 1
WHEN NOT MATCHED THEN
    INSERT (Function_name, Function_count)
    VALUES (source.George, 1);

MERGE INTO FunctionUsage AS target
USING (SELECT Lando FROM [dbo].[Lesson12]
WHERE Lando IS NOT NULL) AS source ON target.Function_name = source.Lando
WHEN MATCHED THEN
    UPDATE SET Function_count = target.Function_count + 1
WHEN NOT MATCHED THEN
    INSERT (Function_name, Function_count)
    VALUES (source.Lando, 1);

MERGE INTO FunctionUsage AS target
USING (SELECT Lewis FROM [dbo].[Lesson12]
WHERE Lewis IS NOT NULL) AS source ON target.Function_name = source.Lewis
WHEN MATCHED THEN
    UPDATE SET Function_count = target.Function_count + 1
WHEN NOT MATCHED THEN
    INSERT (Function_name, Function_count)
    VALUES (source.Lewis, 1);

SELECT * FROM [dbo].[FunctionUsage]
ORDER BY Function_count DESC